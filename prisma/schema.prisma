// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                     @id @default(uuid())
  name              String
  email             String                     @unique()
  password          String
  gender            Gender
  birthDate         DateTime
  podcast           Podcast?
  resetAccountToken String?
  VerifyCode        VerifyCode?
  favoritesEpisodes FavoritesEpisodesOnUsers[]
}

model Image {
  id        String    @id @default(uuid())
  url       String
  key       String
  name      String
  createdAt DateTime  @default(now())
  Podcast   Podcast[]
  Episode   Episode[]
}

model AudioFile {
  id        String    @id @default(uuid())
  url       String
  key       String
  name      String
  createdAt DateTime  @default(now())
  Episode   Episode[]
}

model Podcast {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  image       Image     @relation(fields: [imageId], references: [id])
  episodes    Episode[]
  imageId     String
}

model Episode {
  id             String                     @id @default(uuid())
  title          String
  description    String
  createdAt      DateTime                   @default(now())
  podcast        Podcast                    @relation(fields: [podcastId], references: [id])
  podcastId      String
  image          Image                      @relation(fields: [imageId], references: [id])
  imageId        String
  audioFile      AudioFile                  @relation(fields: [audioFileId], references: [id])
  audioFileId    String
  usersFavorites FavoritesEpisodesOnUsers[]
  categories     Category[]                 @default([])
}

model FavoritesEpisodesOnUsers {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  episode   Episode @relation(fields: [episodeId], references: [id])
  episodeId String

  @@id([userId, episodeId])
}

model VerifyCode {
  user    User   @relation(fields: [userId], references: [id])
  code    String
  expires BigInt
  userId  String @id
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY @map("NON-BINARY")
}

enum Category {
  TRUE_CRIME
  COMEDY
  NEWS
  EDUCATION
  TECHNOLOGY
  SPORTS
  HEALTH
  BUSINESS
  HISTORY
  FICTION
  STORYTELLING
  SELF_IMPROVEMENT
  POLITICS
  MUSIC
  SCIENCE
  PHILOSOPHY
  TRAVEL
  LANGUAGE
  CULTURE
  RELIGION
  ART
  KIDS
  ENVIRONMENT
  ANIME
  GAMING
  FINANCE
  LITERATURE
  RELATIONSHIPS
  FOOD
  DOCUMENTARY
  ENTERTAINMENT
  INTERVIEWS
}
